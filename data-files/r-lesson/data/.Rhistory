>ranef
?ranef
ranef(fit_sod, condVar=T)
a = ranef(fit_sod, condVar=T)
a
a$brand_number
summary(fit_sod)
fit_sod
str(fit_sod)
fit_sod$Zt
fit_sod[['Zt']]
predict(fit_sod)
predict?
)
?predict
predict(fit_sod, interval="confidence")
predict(fit_sod)
predict(fit_sod, se.fit=T)
predict.merMod?
)
?predict.merMod
simulate.lme(fit_sod)
predict(fit_sod, newdata=data.frame(brand_number=1:6))
bootMer(fit_sod, fxn)
fxn = function(fit_sod){predict(fit_sod, newdata=data.frame(brand_number=1:6))}
bootMer(fit_sod, fxn)
fxn = function(fit_sod){predict(fit_sod, newdata=data.frame(brand_number=1:6))}
boot_samp = bootMer(fit_sod, fxn, nsim=3)
library(boot)
boot.ci(boot_samp)
boot.ci(boot_samp, index=1)
boot_samp
boot_samp = bootMer(fit_sod, fxn, nsim=100)
boot_samp
?boot.ci
library(boot)
boot.ci(boot_samp)
boot_samp = bootMer(fit_sod, fxn, nsim=1000)
boot_samp$t0
boot_samp$t1
boot_samp$t0
?predict.merMod
boot_samp = bootMer(fit_sod, fxn, nsim=10)
boot_samp
boot_samp = bootMer(fit_sod, fxn, nsim=1)
boot_samp
boot_samp = bootMer(fit_sod, fxn, nsim=2)
boot_samp
boot_samp$t
boot_samp = bootMer(fit_sod, fxn, nsim=10)
boot_samp$t
boot.ci(boot_samp, index=2)
boot_samp = bootMer(fit_sod, fxn, nsim=1000)
bootsamp$t
boot_samp$t
?apply
?quantile
q1 = function(data){quantile(data, probs=c(0.005, 0.995))}
apply(boot_samp$t, 2, q1)
apply(boot_samp$t, 2, mean)
fxn(fit_sod)
boot_samp
boot_samp$t
colMean(boot_samp$t)
colMeans(boot_samp$t)
data = aov(sodium_content ~ brand, data=sodium)
data = aov(sodium_content ~ as.factor(brand_number), data=sodium)
data
fit2 = aov(sodium_content ~ as.factor(brand_number), data=sodium)
summary(fits)
summary(fit2)
fit_sod2 = aov(sodium_content ~ as.factor(brand_number), data=sodium)
summary(aov)
summary(fit_sod2)
qf(0.025, 5, 6*7)
qf(3, 5, 6*7)
qf(0.975, 5, 6*7)
MSRTR = 170.91
MSE = 0.72
ratio = MSRTR / MSE
n = 8
r = 6
f_val_small = qf(0.025, r - 1, r * (n - 1))
f_val_large = qf(0.975, r - 1, r * (n - 1))
f_val_large = qf(0.975, r - 1, r * (n - 1). lower.tail = T)
f_val_large = qf(0.975, r - 1, r * (n - 1), lower.tail = T)
f_val_large = qf(0.975, r - 1, r * (n - 1), lower.tail = T)
f_val_large
MSRTR = 170.91
MSE = 0.72
ratio = MSRTR / MSE
n = 8
r = 6
lower_f = qf(0.975, r - 1, r * (n - 1))
upper_f = qf(0.025, r - 1, r * (n - 1))
# From handout
lower_bound = (1 / n) * (ratio * (1 / lower_f) - 1)
upper_bound = (1 / n) * (ratio * (1 / upper_f) - 1)
lower_bound
upper_bound
list(lower_bound=lower_bound, upper_bound=upper_bound)
milage = read.table("/Users/mqwilber/Dropbox/UCSB/classes/PSTAT225/hw/HW1/milage.dat", header=T)
mileage = read.table("/Users/mqwilber/Dropbox/UCSB/classes/PSTAT225/hw/HW1/milage.dat", header=T)
head(mileage)
ggplot(data=sodium, aes=c(x=as.factor(brand_number), y=sodium_content)) + geom_boxplot()
library(ggplot2)
ggplot(data=sodium, aes=c(x=as.factor(brand_number), y=sodium_content)) + geom_boxplot()
ggplot(data=sodium, aes=c(x=as.factor(brand_number), y=sodium_content)) + stat_boxplot()
ggplot(data=sodium, aes=c(x=as.factor(brand_number), y=sodium_content)) + stat_boxplot(x=as.factor(brand_number), y=sodium_content))
ggplot(data=sodium, aes(x=as.factor(brand_number), y=sodium_content)) + stat_boxplot(aes(x=as.factor(brand_number), y=sodium_content))
ggplot(data=sodium, aes(x=as.factor(brand_number), y=sodium_content)) + stat_boxplot(aes(x=as.factor(brand_number), y=sodium_content)) + theme_bw()
plot(fit_sod)
plot(fit_sod2)
qqnorm(fit_sod)
qqnorm(residuals(fit_sod))
qqnorm(residuals(fit_sod), type="normalize")
qqnorm(residuals(fit_sod), type="normalized")
qqnorm(residuals(fit_sod, type="normalized"))
?residuals.merMod
qqnorm(residuals(fit_sod, type="response"))
?residuals.merMod
qqnorm(ranef(fit_sad))
qqnorm(ranef(fit_sod))
ranef(fit_sod)
ranef(fit_sod)$brand_number
qqnorm(ranef(fit_sod)$brand_number)
qqnorm(ranef(fit_sod)$brand_number)
ranef(fit_sod)$brand_number
qqnorm(ranef(fit_sod)$brand_number)
dev.off()
qqnorm(ranef(fit_sod)$brand_number)
random_effects = ranef(fit_sod)$brand_number
as.vector(random_effects)
random_effects = as.vector(ranef(fit_sod)$brand_number)
qqnorm(random_effects)
qqnomr(rnorm(100))
qqnorm(rnorm(100))
qqnorm(c(1, 2)
)
random_effects
typeof(random_effects
)
random_effects$(Intercept)
random_effects['(Intercept)']
colnames(random_effects) = inter
colnames(random_effects) = c("inter")
random_effects
re = ranef(fit_sod)$brand_number)
re = ranef(fit_sod)$brand_number
colnames(re) = c("inter")
qqnorm(re$inter)
plot(fit_sod)
qqnorm(residuals(fit_sod, type="response"))
re = ranef(fit_sod)$brand_number
colnames(re) = c("inter")
qqnorm(re$inter)
dev.off()
summary(fit_sod)
confint.merMod(fit_sod)
mileage = read.table("/Users/mqwilber/Dropbox/UCSB/classes/PSTAT225/hw/HW1/milage.dat", header=T)
head(mmlieage)
mileage = read.table("/Users/mqwilber/Dropbox/UCSB/classes/PSTAT225/hw/HW1/milage.dat", header=T)
head(mileage)
mileage
ggplot(data=mileage, aes(x=as.factor(driver), y=miles_per_gallon)) + stats_boxplot
ggplot(data=mileage, aes(x=as.factor(driver), y=miles_per_gallon)) + stat_boxplot
ggplot(data=mileage, aes(x=as.factor(driver), y=miles_per_gallon)) + stat_boxplot()
ggplot(data=mileage, aes(x=as.factor(driver), y=miles_per_gallon)) + stat_boxplot() + facet_wrap(~car)
ggplot(data=mileage, aes(x=as.factor(driver), y=miles_per_gallon)) + stat_boxplot() + facet_wrap(~car) + theme_bw()
ggplot(data=mileage, aes(x=as.factor(car), y=miles_per_gallon)) + stat_boxplot() + facet_wrap(~driver) + theme_bw()
fit_mil = lmer(miles_per_gallon ~ 1 + (1 | driver) + (1 | car) + (1 | car:driver), data=mileage)
summary(fit_mil)
confint.merMod(fit_mil)
fit_mil1 = aov(miles_per_gallon ~ driver + gallon + driver*gallon, data=mileage)
fit_mil1 = aov(miles_per_gallon ~ driver + dat + driver*car, data=mileage)
fit_mil1 = aov(miles_per_gallon ~ driver + car + driver*car, data=mileage)
summary(fit_mil1)
summary(fit_mil1)
fit_mil1 = aov(miles_per_gallon ~ driver + car, data=mileage)
summary(fit_mil1)
fit_mil2 =  fit_mil = lmer(miles_per_gallon ~ 1 + (1 | driver) + (1 | car), data=mileage)
fit_mil2 =  fit_mil = lmer(miles_per_gallon ~ 1 + (1 | driver) + (1 | car), data=mileage)
summary(fit_mil2)
confint.merMod(fit_mil2)
plot(fit_mil2)
qqnorm(residuals(fit_mil2, type="response"))
ranef(fit_mil2)
par(mfrow = c(2, 2))
plot(fit_mil2)
qqnorm(residuals(fit_mil2, type="response"))
re_car = ranef(fit_mil2)$car
colnames(re_car) = c("car")
qqnorm(re_car$car)
re_driver = ranef(fit_mil2)$driver
colnames(re_driver) = c("driver")
qqnorm(re_driver$driver)
mil_mixed = fit_mil2 = lmer(miles_per_gallon ~ 1 + as.factor(driver) + (1 | car), data=mileage)
summary(mil_mixed)
anova(mixed_mil)
anova(mil_mixed)
summary(mil_mixed)
anova(mil_mixed)
confint.merMod(mil_mixed)
fit_mil3 = lm(miles_per_gallon ~ as.factor(car) + as.factor(driver), data=mileage)
anova(fil_mil3)
anova(fit_mil3)
fit_mil1 = aov(miles_per_gallon ~ as.factor(driver) + as.factor(car) + as.factor(driver)*as.factor(car), data=mileage)
summary(fit_mil1)
fit_mil3 = lm(miles_per_gallon ~ as.factor(car) + as.factor(driver), data=mileage)
anova(fit_mil3)
library(nlme)
head(Oxboys)
fit1 = lm(height ~ age, data=Oxboys)
fit1 = lm(height ~ age, data=Oxboys)
bwplot(Subject ~ resid(fit1), Oxboys)
library(lattice)
bwplot(Subject ~ resid(fit1), Oxboys)
bwplot(Subject ~ resid(fit1), Oxboys, xlab="residuals", ylab="Subject")
abline(v=0)
bwplot(Subject ~ resid(fit1), Oxboys, xlab="residuals", ylab="Subject")
abline(v=0)
fitlist = lmlist(height ~ age | Subject, Oxboys)
fitlist = lmList(height ~ age | Subject, Oxboys)
plot(fitlist, Subject ~ resid(.))
a = summary(fit1)
a$sigma
summary(fit1)
fitlist
summary(fitlist)$sigma
resid(fitlist)
sum(resid(fitlist)^2)
sum(resid(fitlist)^2) / 182
sum(resid(fitlist)^2) / (234 - 182)
sum(resid(fitlist)^2) / (234)
dim(Oxboys)
sum(resid(fitlist)^2) / (234 - 2 * 26)
sqrt(0.435)
print(sqrt(sum(resid(fitlist)^2) / (234 - 2 * 26))) # Get residual SE from fitlist
fitlist
print(summary(fit1)$sigma)  # Get residual standard error from fit1
print(sqrt(sum(resid(fitlist)^2) / (234 - 2 * 26))) # Get residual SE from fitlist
plot(intervals(fitlist))
?intervals
plot(intervals(fitlist))
cor(coef(fitlist))
fit_rand = lme(height ~ age, random=age | Subject, data=Oxboys)
fit_rand = lme(height ~ age, random= ~ age | Subject, data=Oxboys)
fit_rand
plot(fit_rand, Subject~resid(.), abline=0)
plot(fitlist, Subject ~ resid(.), abline=0)
bwplot(Subject ~ resid(fit1), Oxboys, xlab="residuals", ylab="Subject", abline=0)
plot(fit_rand, Subject~resid(.), abline=0)
summary(fit_rand)
plot(fit_rand)
qqnorm(fit_rand)
qqline(fit_rand)
qqplot(fit_rand)
fit_rand2 = lme(height ~ age, random= ~ age | Subject, data=Oxboys, weights=varIdent(form=~Subject))
plot(fit_rand2, Subject ~resid(.))
summary(fit_rand2)
fit_rand2 = lme(height ~ age, random= ~ age | Subject, data=Oxboys, weight=varIdent(form=~Subject))
plot(fit_rand2, Subject ~resid(.))
summary(fit_rand2)
fit_rand2 = lme(height ~ age, random= ~ age | Subject, data=Oxboys, weights=varIdent(form=~1|Subject))
plot(fit_rand2, Subject ~resid(.))
summary(fit_rand2)
plot(fit_rand2)
plot(fit_rand)
plot(fit_rand, fitted(.)~resid(., type="p")
)
plot(fit_rand, resid(., type="p")~fitted(.))
plot(fit_rand, resid(.)~fitted(.))
plot(fit_rand, resid(., type="p")~fitted(.))
qqnorm(resid(fit_rand, type="p"))
qqline(resid(fit_rand, type="p"))
augPred(fit_rand)
plot(augPred(fit_rand))
plot(augPred(fit_rand), pch=19)
plot(augPred(fit_rand), pch=19, size=1)
plot(augPred(fit_rand), pch=1, size=1)
plot(augPred(fit_rand), pch=1, s=1)
?plot
plot(augPred(fit_rand), pch=1, cex=1)
plot(augPred(fit_rand), pch=1, cex=0.1)
plot(augPred(fit_rand), pch=1, cex=0.3)
plot(fit_rand, resid(.) ~ age | Subject)
plot(fit_rand, resid(.) ~ age | Subject, abline=0, cex=0.5)
fitlist_quad = lmList(height ~ age + age**2, Oxboys)
plot(intervals(fitlist_quad))
fitlist_quad = lmList(height ~ age + age^2, Oxboys)
plot(intervals(fitlist_quad))
summary(fitlist_quad)
fitlist_quad
fitlist_quad = lmList(height ~ age + I(age^2), Oxboys)
fitlist_quad = lmList(height ~ age + I(age^2) | Subject, Oxboys)
fitlist_quad
plot(intervals(fitlist_quad))
fit_rand_quad = lme(fitlist_quad)
summary(fit_rand_quad)
plot(fit_rand_quad)
fit_rand_quad2 = update(fit_rand_quad, weights=~1|Subject)
fit_rand_quad2 = update(fit_rand_quad, weights=varIdent(form=~1|Subject))
plot(fit_rand_quad2)
qqnorm(fit_rand_quad)
ranef(fit_rand_quad)
qqnorm(ranef(fit_rand_quad)$"Intercept")
qqnorm(ranef(fit_rand_quad)$"(Intercept)")
qqnorm(qqnorm(ranef(fit_rand_quad)$"I(age^2"))
qqnorm(ranef(fit_rand_quad)$"age")
plot(fit_rand_quad, resid(.) ~ age | Subject, abline=0, cex=0.5)
summary(fit_rand_quad)
fit_rand_quad_cs = update(fit_rand_quad, random=list(Subject = pdCompSymm(~age + I(age^2))))
summary(fit_rand_quad_cs)
fit_rand_quad_cs = update(fit_rand_quad, random=list(Subject = pdCompSymm(~age + I(age^2))), method="ML")
fit_rand_quad = update(fit_rand_quad, method="ML")
anova(fit_rand_quad, fit_rand_quad_cs)
summary(fit_rand_quad)
drop1(fit_rand_quad)
library(lme4)
drop1(lme)
drop1(fit_rand_quad)
library(lme4)
drop1(fit_rand_quad)
2+2
2+2
f = "hello"
data = read.csv("/Users/mqwilber/Repos/empirical_taylor_law/data/canonical_tpl_data.csv")
data$logvar
source("/Users/mqwilber/Repos/empirical_taylor_law/code/rsquared_fxns.R")
source("/Users/mqwilber/Repos/empirical_taylor_law/code/taylor_law_analysis_functions.R")
standardize(data$logvar)
standardize(data['logvar'])
standardize(as.vector(data['logvar']))
standardize(unlist(data['logvar']))
data['logvar']
data['logvar'][, 1]
data_trun['temp'] = 4
data['temp'] = 4
data$temp
# Load the data
data = read.csv("/Users/mqwilber/Repos/empirical_taylor_law/data/canonical_tpl_data.csv")
# Truncated data to eliminate the forbidden region.
# Xiao et al. only consider points with hosts > 2 and parasites > 4
ind = (data$count > 2) & ((data$mean * data$count) > 4)
data_trun = data[ind, ]
data_trun = droplevels(data_trun)
data_trun$year = as.factor(data_trun$year)
# Standardize our variables
varnames = c("resid_svlbyspp", "logvar_svl", "parasitemass", "infectionsuccess", "oddsratio", "avgload", "hostlarvalperiod", "hostsizemeta", "hostclutch", "hostagemax")
for(nm in varnames){
data_trun[paste(nm, "_sd", sep="")] = standardize(data_trun[nm][1, ])
}
data_trun
colnames(data_trun)
library(MASS)
library(glmmML)
library(lme4)
library(ggplot2)
library(gridExtra)
library(lmerTest)
library(lattice)
library(ggbiplot)
library(nlme)
source("/Users/mqwilber/Repos/empirical_taylor_law/code/rsquared_fxns.R")
source("/Users/mqwilber/Repos/empirical_taylor_law/code/taylor_law_analysis_functions.R")
# Load the data
data = read.csv("/Users/mqwilber/Repos/empirical_taylor_law/data/canonical_tpl_data.csv")
# Truncated data to eliminate the forbidden region.
# Xiao et al. only consider points with hosts > 2 and parasites > 4
ind = (data$count > 2) & ((data$mean * data$count) > 4)
data_trun = data[ind, ]
data_trun = droplevels(data_trun)
data_trun$year = as.factor(data_trun$year)
# Standardize our variables
varnames = c("resid_svlbyspp", "logvar_svl", "parasitemass", "infectionsuccess", "oddsratio", "avgload", "hostlarvalperiod", "hostsizemeta", "hostclutch", "hostagemax")
for(nm in varnames){
data_trun[paste(nm, "_sd", sep="")] = standardize(data_trun[nm][1, ])
}
base_model = lmer(logvar ~ logmean + logmean*species + logmean*parasite +
logmean*resid_svlbyspp_sd +
+ logmean*year + (1 | site) + count, data=data_trun,
REML=FALSE)
data_trun$site
Sys.which("pdflatex")
Sys.getenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/Library/TeX/Distributions/Programs/texbin/pdflatex",sep=":"))
Sys.which("pdflatex")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/Library/TeX/Distributions/Programs/texbin",sep=":"))
Sys.which("pdflatex")
setwd("~/Desktop/software-carpentry-2016/data-files/r-lesson/data/")
list.file()
list.files()
setwd("~/Desktop/software-carpentry-2016/data-files/r-lesson/data/")
list.files()
list.files()
analyze <- function(filename) {
# Plots the average, min, and max inflammation over time.
# Input is character string of a csv file.
dat <- read.csv(file = filename, header = FALSE)
avg_day_inflammation <- apply(dat, 2, mean)
plot(avg_day_inflammation)
max_day_inflammation <- apply(dat, 2, max)
plot(max_day_inflammation)
min_day_inflammation <- apply(dat, 2, min)
plot(min_day_inflammation)
}
analyze("inflammation-01.csv")
analyze("inflammation-02.csv")
analyze("inflammation-03.csv")
best_practice <- c("Let", "the", "computer", "do", "the", "work")
best_practice
print_words <- function(sentence){
# Function prints a sentence
print(sentence[1])
print(sentence[2])
print(sentence[3])
print(sentence[4])
print(sentence[5])
print(sentence[6])
}
print_words(best_practice)
print_words(best_practice[-6])
print_words <- function(sentence){
for(word in sentence){
print(word)
}
}
print_words(best_practice)
print_words(best_practice[-6])
for(word in best_practice){
print(word)
}
for(word in best_practice){
print(word)
}
word
for(word in best_practice){
print(word)
print(c(word, word))
}
vowels < c("a", "e", "i", "o", "u")
vowels <- c("a", "e", "i", "o", "u")
len <- 0
vowels <- c("a", "e", "i", "o", "u")
for(v in vowels){
len <- len + 1
}
len
len <- 0
vowels <- c("a", "e", "i", "o", "u")
for(v in vowels){
print(len)
len <- len + 1
}
len
v
len <- 0
vowels <- c("a", "e", "i", "o", "u")
for(dinosaur in vowels){
print(len)
len <- len + 1
}
dinosaur
v
letter <- "z"
letter <- "z"
for(letter in c("a", "b","c")){
print(letter)
}
letter
seq(3)
print_N <- function(natural_number){
# Function prints natural numbers
# Input is a number
container_of_numbers <- seq(natural_number)
for(x in container_of_numbers){
print(x)
}
}
print_N(3)
print_N(10)
2^4
expo <- function(base, exponent){
temp <- base
for(x in 1:exponent){
temp <- temp * temp
}
return(temp)
}
expo(2, 2)
expo <- function(base, exponent){
tot <- 1
# Accounts for exponent = 0. Don't worry about this for now
if(exponent == 0){
return(tot)
}
for(i in 1:exponent){
tot = tot * base
}
return(tot)
}
expo(2, 2)
expo(2, 3)
list.files()
Sys.glob("*.csv")
Sys.glob("i*.csv")
list.files(pattern="inflammation")
filenames <- Sys.glob("i*.csv")
for(file in filenames){
print(file)
analyze(file)
}
